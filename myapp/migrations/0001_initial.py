# Generated by Django 5.2.3 on 2025-06-22 12:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the department (e.g., HR, Engineering)', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text="Brief description of the department's function.", null=True)),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('employee', 'Employee')], default='employee', help_text="User's role in the system (Admin or Employee).", max_length=20)),
                ('is_approved', models.BooleanField(default=False, help_text="Designates whether this user's account is approved by an admin.")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AttendanceRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp of the attendance event.')),
                ('record_type', models.CharField(choices=[('clock_in', 'Clock In'), ('clock_out', 'Clock Out')], help_text='Type of attendance record (Clock In or Clock Out).', max_length=10)),
                ('employee', models.ForeignKey(help_text='The employee associated with this attendance record.', on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Attendance Record',
                'verbose_name_plural': 'Attendance Records',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='EmployeeProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(help_text='Full name of the employee.', max_length=255)),
                ('phone_number', models.CharField(blank=True, help_text="Employee's phone number.", max_length=20, null=True)),
                ('address', models.TextField(blank=True, help_text="Employee's residential address.", null=True)),
                ('date_of_birth', models.DateField(blank=True, help_text="Employee's date of birth.", null=True)),
                ('hire_date', models.DateField(default=django.utils.timezone.now, help_text='Date when the employee was hired.')),
                ('job_title', models.CharField(blank=True, help_text="Employee's job title.", max_length=100, null=True)),
                ('salary', models.DecimalField(blank=True, decimal_places=2, help_text="Employee's monthly or annual salary.", max_digits=10, null=True)),
                ('department', models.ForeignKey(blank=True, help_text='The department the employee belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='myapp.department')),
                ('user', models.OneToOneField(help_text='The associated user account for this employee profile.', on_delete=django.db.models.deletion.CASCADE, related_name='employee_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Employee Profile',
                'verbose_name_plural': 'Employee Profiles',
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='LeaveRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leave_type', models.CharField(help_text='Type of leave (e.g., Sick, Vacation, Personal).', max_length=50)),
                ('start_date', models.DateField(help_text='Start date of the leave.')),
                ('end_date', models.DateField(help_text='End date of the leave.')),
                ('reason', models.TextField(help_text='Reason for the leave request.')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Cancelled', 'Cancelled')], default='Pending', help_text='Current status of the leave request.', max_length=20)),
                ('requested_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the leave request was submitted.')),
                ('approval_date', models.DateTimeField(blank=True, help_text='Timestamp when the leave request was approved/rejected.', null=True)),
                ('comments', models.TextField(blank=True, help_text='Comments from the approver/reviewer.', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Admin user who approved/rejected the request.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_leave_requests', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(help_text='The employee who submitted the leave request.', on_delete=django.db.models.deletion.CASCADE, related_name='leave_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Leave Request',
                'verbose_name_plural': 'Leave Requests',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='Payroll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pay_period_start', models.DateField(help_text='Start date of the pay period.')),
                ('pay_period_end', models.DateField(help_text='End date of the pay period.')),
                ('gross_pay', models.DecimalField(decimal_places=2, help_text='Gross pay for the period.', max_digits=10)),
                ('deductions', models.DecimalField(decimal_places=2, default=0.0, help_text='Total deductions for the period.', max_digits=10)),
                ('net_pay', models.DecimalField(decimal_places=2, help_text='Net pay after deductions.', max_digits=10)),
                ('payout_date', models.DateField(help_text='Date the payroll was paid out.')),
                ('employee', models.ForeignKey(help_text='The employee associated with this payroll record.', on_delete=django.db.models.deletion.CASCADE, related_name='payroll_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Payroll Record',
                'verbose_name_plural': 'Payroll Records',
                'ordering': ['-pay_period_end'],
            },
        ),
    ]
